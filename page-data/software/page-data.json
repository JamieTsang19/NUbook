{"componentChunkName":"component---src-components-page-template-jsx","path":"/software","webpackCompilationHash":"5f7d4df577c35f46bf3a","result":{"data":{"mdx":{"id":"b2beaa46-6592-5a56-9333-3471e37514b4","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"chapter\": \"System\",\n  \"title\": \"Software\",\n  \"description\": \"The software used in NUbots.\",\n  \"slug\": \"/software\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The software side of the team is split into the NUbots repository and the NUsight repository. Both are detailed below.\"), mdx(\"h2\", {\n    \"id\": \"languages\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#languages\",\n    \"aria-label\": \"languages permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Languages\"), mdx(\"p\", null, \"Most of the NUbots codebase is written in C++, with some Python. The build system uses CMake, with some Python. The virtual machine provisioning uses Puppet (variant of Ruby). Ruby is used for vagrant control of virtual machines. Protobuf is used for messages. NUsight uses typescript. NUbook uses markdown, HTML, css, jsx, and javascript.\"), mdx(\"h2\", {\n    \"id\": \"nubots\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#nubots\",\n    \"aria-label\": \"nubots permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"NUbots\"), mdx(\"p\", null, \"The NUbots repository is the main codebase that runs on the robots. Its purpose is to control the robot during RoboCup matches. The NUbots codebase, along with all other NUbots code, is open source and can be \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/NUbots/NUbots/\"\n  }), \"found on GitHub\"), \". The primary language in the NUbots codebase is C++.\"), mdx(\"p\", null, \"The main parts of the NUbots codebase are behaviour, motion, vision, and localisation. Behaviours include strategy, planning and skills. Motion includes kicking, getting up, and walking. Vision includes ball, goal and field detectors. Localisation determines where the robot, ball and the field are in the world through odometry. \"), mdx(\"p\", null, \"At the top level, the robot will use strategy to decide what to do, such as whether it will act as a goalkeeper or if it will act like a striker. \"), mdx(\"p\", null, \"The next level down is planning. This includes planning the path to walk along to get to the ball facing the right goal.\\nBelow planning is skills. Skills include kicking, walking, getting up, and looking at objects. \"), mdx(\"p\", null, \"Next is motions. Motions include how the robot moves its feet to walk, and what movements it does to kick or get up.\"), mdx(\"p\", null, \"After motions is hardware IO. The hardware will output the commands and input the information from the world. This will then go through a sensor filter so that the robot can interpret the information. This information then influences strategy.\"), mdx(\"p\", null, \"All these modules are connected using NUClear which is a message passing software architecture. More can be found on NUClear \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nuclear.readthedocs.io/en/latest/\"\n  }), \"here\"), \".\"), mdx(\"img\", {\n    \"src\": \"../images/software-overview.png\",\n    \"alt\": \"Flow of the NUbots codebase\"\n  }), mdx(\"h2\", {\n    \"id\": \"nusight\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#nusight\",\n    \"aria-label\": \"nusight permalink\",\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"NUsight\"), mdx(\"p\", null, \"NUsight is a debugging tool for the NUbots codebase. It contains many functionalities for debugging a range of areas in the NUbots codebase.\"), mdx(\"p\", null, \"When a robot has connected to NUsight, the button in the top right corner will list that robot. When NUsight is getting information from the robot, the circle next to the robot name will light up green. \"), mdx(\"p\", null, \"The first tab in NUsight is the dashboard. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"explanation of the dashboard\")), mdx(\"p\", null, \"The second tab in NUsight is the localisation tab. This shows a 3D view of a soccer field with any robots that have connected to NUsight positioned in the field. The position and movements of the robot come from \\u2026 . When localisation view window is selected, one can move the mouse to rotate the view. When there is a robot selected, one can press the spacebar to switch between free camera view, first person view, and third person view relative to that robot. Escape key will deselect the localisation view. The \\u2018hawk eye\\u2019 button in the top bar will move the view to look directly down at the field.\"), mdx(\"p\", null, \"The next tab is the chart tab. Any graph messages that are emitted from the NUbots code will appear here. This is done using\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-C++\"\n  }), \"emit(graph(\\u201Cgraph name\\u201D, variable));\\n\")), mdx(\"p\", null, \"The graph range can be specified, and graphs can be displayed as line charts or 2D scatterplots. All graphs that can be viewed will be listed per robot on the right hand side with a checkbox. Any number of graphs can be shown at a time. Hovering over the graph name on the right hand side will highlight that graph. The colour of each graph will be specified next to the graph name on the right hand side. \"), mdx(\"p\", null, \"The fourth tab is the vision tab. This receives images from the robot\\u2019s camera. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"something about detection of objects like ball, field, goalposts\")), mdx(\"p\", null, \"The final tab is the visual mesh tab. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"what the visual mesh tab does\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#languages","title":"Languages"},{"url":"#nubots","title":"NUbots"},{"url":"#nusight","title":"NUsight"}]},"frontmatter":{"chapter":"System","title":"Software","description":"The software used in NUbots.","keywords":null,"slug":"/software","hidden":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b2beaa46-6592-5a56-9333-3471e37514b4","next":{"title":"Prerequisites","description":"What you need on your computer.","slug":"/prerequisites","hidden":null},"previous":{"title":"Hardware","description":"The hardware used in NUbots.","slug":"/hardware","hidden":null},"menu":[{"title":"Introduction","pages":[{"title":"Introduction to NUbots","slug":"/"},{"title":"Areas of Research","slug":"/areas-of-research"}]},{"title":"Joining NUbots","pages":[{"title":"How to Join NUbots","slug":"/how-to-join-nubots"}]},{"title":"History","pages":[{"title":"RoboCup History","slug":"/robocup-history"},{"title":"NUbots History","slug":"/nubots-history"}]},{"title":"System","pages":[{"title":"Hardware","slug":"/hardware"},{"title":"Software","slug":"/software"}]},{"title":"Getting Started","pages":[{"title":"Prerequisites","slug":"/prerequisites"}]}]}}}